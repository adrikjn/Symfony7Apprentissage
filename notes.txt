****************************************************************************

Installer le projet et les préréquis : 

composer create-project symfony/skeleton:"7.0.*" my_project_directory
cd my_project_directory
composer require webapp

Démarrer le serveur interne de php
php -S localhost:8000 -t public

****************************************************************************

Créer un controller (Fichier twig & Controller généré): 
php bin/console make:controller NomDuController

On met ensuite la route qui pointe sur le / en changeant le name si on le souhaite
Dans le base.html.twig on met le code qui sera présent sur toute les pages (exemple header/footer - Utilisation de bootstrap (cdn).. JS/CSS..)
Le controller grâce au render permettra de gérer la route on peut inclure des variables afin de rendre le site dynamique et nous pouvons les afficher à l'aide de {{  }}
Pour gérer les routes nous allons utiliser path() qui va inclure le nom de la route, d'autre paramètres peuvent être inclus comme l'id le slug etc.. dans le path

****************************************************************************

Création base de données & entités

Dans le fichier .env on va utiliser mysql on commente donc l'autre ligne et on va décommenter mysql.
On va changer les informations comme ceci : DATABASE_URL="mysql://root@127.0.0.1:3306/symfony7apprentissage"
Puis nous allons faire la commande :

php bin/console d:d:c pour créer la base de donnée de notre projet

On peut par la suite créer les entités a l'aide de la commande : 

php bin/console make:entity  - entré
Choisir le nom de l'entité
Symfony UX Turbo = Enter sur non
nom de la propriété et son type (Exemple : title - string / createdAt - dateImmutable)
field lenght est le nb maximal de caractère stockable pour le champs
Nullable ? Non car chaque recette doit avoir un nom

SUCCESS

Deux fichiers on été créer dans le dossier Entité et Repository
L'entité contient chacun des propriétés et ses différents getter et setter que l'on utilisera.
Le repositery contiendra toute les méthodes afin de communiquer avec la BDD pour récupérer des informations par exemple.


Nous pouvons faire la commande ci dessous pour créer le fichier de migration (Requête SQL permettant de créer les tables):

php bin/console make:migration 

Puis on exécuter le fichier de migration dans la BDD à l'aide de la commande :

php bin/console d:m:m
Yes

SUCCESS

Pour récupérer des informations depuis la BDD nous allons utliser le repositery (exemple :  $recipes = $repository->findAll();) dans notre controller tout en envoyant la variable dans le render et nous pouvons par la suite afficher les recettes en faisant une boucle dans le fichie twig de cette manière : 

    {% for recipe in recipes %}
		<li><a href="{{ path('recipe.show', {id: recipe.id, slug: recipe.slug})}}">{{ recipe.title }}</a></li>
	{% endfor %}

Nous pouvons aussi construire des requêtes plus compliqué dans le Repository à l'aide du queryBuilder si l'on veut es informations plus difficile a obtenir comme :
Duration - de 10 minutes seulement

****************************************************************************

Créer un formulaire pour une entité :

php bin/console make:form
NomType
Bound : Yes

Automatiquement un fichier RecipeType dans le dossierform va être créer contenant les champs de l'entités

Afin d'appliquer le style de bootstrap sur les formulaires il faut se rendre dans config puis packages puis twig.yaml et placer :
twig:
    file_name_pattern: '*.twig'
    form_themes: ['bootstrap_5_layout.html.twig']

Dans le controller il faudra construire une requête permettant de traiter le formulaire a l'aide du handleRequest puis flush..
Le edit va récupérer dans le form les informations de la recette sous forme de formulaire et il faudra ainsi faire quelque modifications dans le recipetype ou il faudra retirer les données dynamiques (createdAt par exemple.) On peut rajouter des label a partir du recipe type des buttons etc mais je préfère faire ceci a partir du fichier twig edit.
Dans le fichier twig il faudra faire un form_start(nom de la variable) puis lister tout les champs que l'on souhaite mettre de la manière : {{form_row(form.title)}} dans le formulaire puis un button pour le formulaire puis refermer avec un form_end(nom de la variable). Ainsi l'edit marchera convenablement.


Affcher un message flash suite au Edit qui sera effacé lorsqu'on refresh la page.

Message flash : Dans le controller avant le redirect on place par exemple : 
         $this->addFlash('success', 'La recette a bien été modifiée');
on include dans le body.html.twig	:	{% include "partials/flash.html.twig" %}
On créer un dossier partials et un ficher flash.html.twig on fait une boucle selon le type : 
{% for type, messages in app.flashes %}
    <div class="alert alert-{{ type }}">
        {{  messages | join('. ')}}
    </div>
{% endfor %}

Pour le create ça marche presque de la même manièe cependant on doit set les valeurs dans la fonction relatif au datetime et on doit créer un objet vide afin de rentrer de nouvelles données ($recipe = new Recipe();) On persist on flush et les données sont envoyé en BDD

Pour autoriser le delete on va dans config puis packages puis framework.yaml
on ajoute la dernirèe ligne en dessous de fragment
    #esi: true
    #fragments: true
    http_method_override: true

On doit mettre la methode delete dans la route et dans le fichier twig nous devons faire ceci pour simuler un delete

                <form action="{{path('recipe.delete', {id: recipe.id})}}" method="post">
				<input type="hidden" name="_method" value="DELETE">
					<button type="submit" class="btn btn-danger btn-sm" >Supprimer</button>
				</form>

On peut aussi créer des eventlistener par exemple si slug vide il prend le nom du title MËME SI le champ n'est pas NULLABLE !!

****************************************************************************

Valider les données 

On peut le faire dans le fichier type ou dans l'entité directement
Sequentially permet d'afficher les erreurs 1 par 1 (meilleur pour le STYLE) afin d'éviter le spam on corrige d'abord une erreure et la second peut apparaitre par la suite.
->add('slug', TextType::class, [
                'required' => false,
            ])

Pour faire des banword :
php bin/console make:validator /  BanWordValidator
Il faudra placer avant la propriété de l'entité ceci : #[BanWord()] et faire les modifications des deux fichiers (regarder)


****************************************************************************

GERER UN MAILER DE DEV TP UTILISE !!
TP : Formulaire de Contact
Allez dans le fichier messenger.yaml (config package) (par défaut ils sont envoyé avec messenger)

On décommente : sync: 'sync://'
On transforme les 3 routing en sync :
routing:
            Symfony\Component\Mailer\Messenger\SendEmailMessage: sync
            Symfony\Component\Notifier\Message\ChatMessage: sync
            Symfony\Component\Notifier\Message\SmsMessage: sync

.env partie mailer changer sur :  MAILER_DSN=smtp://localhost:1025
ON Télécharge mailpit on le met dans le fichier bin après l'avoir extrait et on peu le lancer, on peut aller sur  http://localhost:8025/

Créer dossier DTO puis fichier ContactDTO.php à l'intérieur on créer les propriétés comme la manière des entités avec les contraintes de valiation, on gère le contacttype

Ensuite on peut php bin/console make:form ContactType
Puis \App\DTO\ContactDTO

Typé car ce ne sont pas des champs d'entité 
            ->add('name', TextType::class)
            ->add('email', EmailType::class)
            ->add('message', TextareaType::class)

On peut faire un :
php bin/console make:controller ContactController et construire le mail on peut créer un template afin de styliser le mailer

****************************************************************************

Rendre ce CRUD dans la partie admin 

Création 'un dossier Admin dans le controller et on déplace toute la partie admin dedans, tout en changeant le namespace du controller

Ajouter une route au dessus de la class afin de rajouter le préfix admin de l'url :

#[Route('/admin/recettes', name: 'admin.recipe.')]
class RecipeController extends AbstractController

On change les routes maintenant de chaque function du controller :
   #[Route('/create', name: 'create')]
   #[Route('/{id}', name: 'edit', methods:['GET', 'POST'], requirements:['id' => Requirement::DIGITS])]
   #[Route('/{id}', name: 'delete', methods:['DELETE'], requirements:['id' => Requirement::DIGITS])]
   #[Route('/', name: 'index')]  
   Il faut aussi changer les redirect car les names on été changé on va créer un dossier admin au racinedu twig aussi et changer le link
   Changer les routes des twig aussi du coup

Maintenant qu'on a changé les routes 

on va dupliquer le fichier base car celui de l'admin et celui du front le base est différent (exemple bar nav footer).
On va changer les routes pour l'admin et changer le extend de chacune des pages admin


****************************************************************************

Créer les catégories
On a créer le controller à la MAIN et créer les routes :
<?php

namespace App\Controller\Admin;

use Symfony\Component\Routing\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Requirement\Requirement;

#[Route("/admin/category", name: "admin.category.")]
class CategoryController extends AbstractController
{
    #[Route(name: "index")]
    public function index()
    {
    }

    #[Route("/create", name: "create")]
    public function create()
    {
    }

    #[Route("/{id}", name: "edit", requirements: ['id' => Requirement::DIGITS], methods: ['GET', 'POST'])]
    public function edit()
    {
    }

    #[Route("/{id}", name: "delete", requirements: ['id' => Requirement::DIGITS], methods: ['DELETE'])]
    public function remove()
    {
    }
}

Nous pouvons créer l'entitié 
php bin/console make:entity Category
On rempli les champs et on peut pour créer le fichier de migration et l'envoyer à la bdd :
php bin/console make:migration
php bin/console d:m:m

On va en même temps lui demander de générer le formulaire de category
php bin/console make:form CategoryType 
Bound a Category

****************************************************************************

Relation Many to One entre Recipe & Category

php bin/console make:entity Recipe 
On nomme le champ category (car on est dans l'entité recipe)
relation Many To One
Lié au : Category
Nullable : oui
Ajouer une propriéta a category : oui 
oui
php bin/console make:migration 
php bin/console d:m:m

Il faut ajouter le champ avec une EntityType::class dans le RecipeType afin d'être apte lors de la création ou la modification d'une recette de mettre une catégorie

      ->add('category', EntityType::class, [
                'class' => Category::class,
                'choice_label' => 'name' ,
            ])

On fait pareil dans l'autre Type

En mettant dans l'entité Category ceci cascade:
#[ORM\OneToMany(targetEntity: Recipe::class, mappedBy: 'category', cascade: ['remove'])]
    private Collection $recipes;

On peut permettre lors de la supression du category, la supression de la recette qui est lié grâce a l'id category stocké dans la recette

****************************************************************************

Envoi de fichiers

Tout d'abord on a entré un nouveau champ dans la bdd thumbnail,
dans le RecipeType on a ajouté un champ ->add('thumbnailFile', FileType::class, [
                'mapped' => false,
                'constraints' => [
                    new Image()
                ]
            ])
Attention Il ne s'agit pas du champ de la bdd 

Dans le controller on :
 /** @var UploadedFile $file */
         $file = $form->get('thumbnailFile')->getData();
         $filename=$recipe->getId() . '.' . $file->getClientOriginalExtension();
         $file->move('???',$filename);
         $recipe->setThumbnail($filename);

Afin de remplacer les ? qu'il y'a dans le move il faut obtenir le chemin,
on doit donc faire la commande 
php bin/console debug:container --parameters 
On regarde le kernel project dir qui va donner la route 
kernel.project_dir
C:\Users\adrie\OneDrive\Bureau\Symfony7Apprentissage  

$file->move($this->getParameter('kernel.project_dir') . '/public/recettes/images',$filename);

En mettant ceci même si nous n'avons pas le dossier recettes/images il va se créer auomatiquement.
On peut voir que le dossier a bien été créer dans public

Pour l'afficher dans le twig il suffira juste de mettre : 
        <img src="/recettes/images/{{recipe.thumbnail}}" alt="">

ON PEUT AUSSI (CONSEILLER)

On va utiliser un bundle de symfony pour gérer les images.
composer require vich/uploader-bundle 
Des fichiers vont être générées
dans le vich_uploader.yaml changer les données comme ceci : 
vich_uploader:
    db_driver: orm

    mappings:
       recipes:
           uri_prefix: /images/recipes
           upload_destination: '%kernel.project_dir%/public/images/recipes'
           namer: Vich\UploaderBundle\Naming\SmartUniqueNamer
Puis se rendre dans son entité
Créer une nouvelle propriété, mettre les getter et setter, mettre 
use Vich\UploaderBundle\Mapping\Annotation as Vich;
use Vich\UploaderBundle\Entity\File;
#[Vich\Uploadable()]
#[Vich\UploadableField(mapping: 'recipes', fileNameProperty: 'thumbnail')]
    private ?File $thumbnailFile = null;
    public function getThumbnailFile(): ?File
    {
        return $this->thumbnailFile;
    }

    public function setThumbnailFile(?File $thumbnailFile): static
    {
        $this->thumbnailFile = $thumbnailFile;
        return $this;
    }
Le fait d'utiliser ce composant permet de gérer la partie delete/remplacement beaucoup plus facilement sans logique intégrée. 

Afin d'upload mainetenant l'image avec ce bundle il faut faire ceci : 
    <img src="{{ vich_uploader_asset(recipe, 'thumbnailFile') }}" alt="">

Je préfère la partie logique personnellement que le bundle (regarder projet symfony 6)

**************************************************************************

LE COMPOSANT SECURITE

Créer l'entité User 
php bin/console make:user
entré
oui
username
oui hash

Mettre en place le système d'authentification
php bin/console make:auth
Login form authenticator
AppAuthenticator
SecurityController
yes generate logout
remember me yes
0

Ajouter le champ email dans l'entité user 
php bin/console make:entity User
make migration / dmm

On peut créer le 1er utilisateur avec ceci dans un controller puis supprimé : 
      // $user = new User();
        // $user->setEmail('john@doe.fr')
        //     ->setUsername('JohnDoe')
        //     ->setPassword('0000')
        //     ->setPassword($hasher->hashPassword($user, '0000'))
        //     ->setRoles([]);
        // $em->persist($user);
        // $em->flush();

Effacer la partie throw except et décommenter  dans l'app authenticator et mettre Suite à la connexion :
        return new RedirectResponse('/');
        *return new RedirectResponse($this->urlGenerator->generate('admin.recipe.index'));*

On peut personnaliser afin d'accepter l'email et l'username pour le login
On se rend de le app authenticator
Et on place le repo dans le construct :
 public function __construct(private UrlGeneratorInterface $urlGenerator, private UserRepository $userRepository)
    {
    }
Ensuite on se rend dans le repo user afin de construire un queryBuilder

public function findUserByEmailOrUsername(string $usernameOrEmail): ?User {
        return $this->createQueryBuilder('u')
        ->where('u.email = :identifier')
        ->orWhere('u.username = :identifier')
        ->setParameter('identifier', $usernameOrEmail)
        ->setMaxResults(1)
        ->getQuery()
        ->getSingleResult();
    }

et dans l'app authenticator on rajoute au moment du return passport:
return new Passport(
            new UserBadge($username, fn (string $identifier) => $this->userRepository->findUserByEmailOrUsername($identifier)),

Je peux mettre sois tout en haut du controller : 
#[IsGranted('ROLE_USER')]
Ainsi toute les page de ce controller devront contenir le role_user pour accéder (envoyé sur la page login)
Sinon je peux aussi mettre en haut de chaque route function pour différer

Au niveau de mon get role  je vais placer une condition permettant de placer le 1er admin 
public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        $roles[] = 'ROLE_USER';

        if($this->email === 'john@doe.fr') {
            $roles[] = 'ROLE_ADMIN';
        }
        
        return array_unique($roles);
    }
et je peux modifier le isGranted dans mon controller en ROLE_ADMIN :

#[Route('/admin/recettes', name: 'admin.recipe.')]
#[IsGranted('ROLE_ADMIN')]
class RecipeController extends AbstractController

Formulaire d'inscription utilisateur : 

php bin/console make:registration-form
Yes unique
Yes email (composer require symfonycasts/verify-email-bundle)
no il devra taper son compte après s'être inscrit
email : support@demo.fr
Support comme nom 
Yes se connecter automatiquement après l'inscription

composer require symfonycasts/verify-email-bundle

Vu qu'on a demandé le truc d'email verify on doit faire un make migration et un dmm

Vu qu'on accepte nom de compte et email on doit rajouter ceci sur l'entité #[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')] en dessous du username mais aussi rajouter le champ email dans le RegistrationFormType

Commenter toute la partie mailer dans le registrationcontroller

**************************************************************************

Gérer la pagination avec deux méthodes (Doctrines & Bundles)

Doctrine :

Tout d'abord créer dans le repo recipe une function pour paginator 
public function paginateRecipes(int $page, int $limit): Paginator
    {
        return new Paginator(
            $this
                ->createQueryBuilder('r')
                ->setFirstResult(($page - 1) * $limit)
                ->setMaxResults($limit)
                ->getQuery()
                ->setHint(Paginator::HINT_ENABLE_DISTINCT, false), false
        );
    }

dans le controller nous faisons la logique 

  public function index(RecipeRepository $repository, Request $request): Response
   {
      // $recipes = $repository->findWithDurationLowerThan(20);
      $page = $request->query->getInt('page', 1);
      $limit = 1;
      $recipes = $repository->paginateRecipes($page, $limit);
      $maxPage = ceil($recipes->count() / $limit);
      return $this->render('admin/recipe/index.html.twig', [
         'recipes' => $recipes,
         'maxPage' => $maxPage,
         'page' => $page
      ]);
   }

   et dans la vue on affiche selon la limit 
   	<div class="d-flex">
		{% if page > 1 %}
			<a class="btn btn-secondary"href="{{ path('admin.recipe.index', {page: page - 1})}}">Page précédente</a>
		{% endif %}
		{% if page < maxPage %}
			<a class="btn btn-secondary"href="{{ path('admin.recipe.index', {page: page + 1})}}">Page suivante</a>
		{% endif %}
	</div>

Bundle maintenant : knp paginaor bundle

composer require knplabs/knp-paginator-bundle
Ajouter dans le repository dans l'indépendance le knp  
use Knp\Component\Pager\PaginatorInterface;
public function __construct(ManagerRegistry $registry, private PaginatorInterface $paginator)

Ceci est la requête du repo 
public function paginateRecipes(int $page):PaginationInterface //Paginator
    {
        return $this->paginator->paginate(
            $this->createQueryBuilder('r'),
            $page,
            20
        );
    }
Le controller va ressembler a ceci sans le code précédent : 

#[Route('/', name: 'index')]
   public function index(RecipeRepository $repository, Request $request): Response
   {
      $page = $request->query->getInt('page', 1);
      $limit = 1;
      $recipes = $repository->paginateRecipes($page);
      return $this->render('admin/recipe/index.html.twig', [
         'recipes' => $recipes,
      ]);
   }
Et dans le fichier twig il suffit juste de 
	{{ knp_pagination_render(recipes) }}
pour afficher 

Cependant on doit attribuer un style.
On créer un fichier knp_paginator.yaml 
et on copie colle le template de base qu'on peut récupérer ici : https://github.com/KnpLabs/KnpPaginatorBundle
Cependant il y'a des données à changer comme :
        pagination: '@KnpPaginator/Pagination/bootstrap_v5_pagination.html.twig'     # sliding pagination controls template
        sortable: '@KnpPaginator/Pagination/bootstrap_v5_bi_sortable_link.html.twig' # sort link template
        filtration: '@KnpPaginator/Pagination/bootstrap_v5_filtration.html.twig'  # filters template
Car on utilise bootstrap 5. Ceci peut evoluer en fonction des versions. Le style est maintenant meilleur grâce a bootstrap.

On peeut aussi faire du tri a partir des titres 
à l'aide du bundle il suffit juste de mettre ce genre de ligne il va utiliser ce qu'on a fait dans le repository 
            <th>{{ knp_pagination_sortable(recipes, 'ID', 'r.id')}}</th>
			<th>{{ knp_pagination_sortable(recipes, 'Titre', 'r.title')}}</th>
Pour finir pour améliorer la sécurité dans le repo on ajoue sur les champs  [
                'distinct' => true,
                'sortFieldAllowList' => ['r.id', 'r.title']
            ]